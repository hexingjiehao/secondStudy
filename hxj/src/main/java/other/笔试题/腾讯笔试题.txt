1.在数据库系统中，产生不一致的根本原因是什么？【OK】
答：
A.数据冗余；
B.并发控制不当；
C.故障或者错误


2.使用信号量模拟生产者和消费者这个多线程程序？【OK】
答：
本质：应该还是计数器上加锁。
#define N 100
typedef int semaphore;
semaphore mutex = 1;
semaphore empty = N;
semaphore full = 0;
void producer(void)
{
    int item;
    while(TRUE){
        item = produce_item();
        down(&empty);
        down(&mutex);
        insert_item(item);
        up(&full);
        up(&mutex);
    }
}
void consumer(void)
{
    int item;
    while(TRUE){
        down(&full);
        down(&mutex);
        item = remove_item();
        up(&empty);
        up(&mutex);
        consume_item(item);
    }
}


3.同步机制应该遵循哪些基本准则？【OK】
答：
空闲让进
忙则等待
有限等待
让权等待


4.Internet物理地址和IP地址转换采用什么协议？【OK】
答：
ARP(AddressResolutionProtocol)（地址解析协议)
RARP协议


5.static有什么用途？【OK】
答：
类型声明符在C语言里面主要有三个用途：
a.声明静态局部变量
b.声明静态外部全局变量
c.声明静态外部函数


6.引用与指针有什么区别？【OK】
答：
1. 指针是一个实体，而引用仅是个别名；
2. 引用使用时无需解引用(*)，指针需要解引用；
3. 引用只能在定义时被初始化一次，之后不可变；指针可变；
4. 引用没有 const，指针有 const；
5. 引用不能为空，指针可以为空；
6. “sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小；
7. 指针和引用的自增(++)运算意义不一样；
8.从内存分配上看：程序为指针变量分配内存区域，而引用不需要分配内存区域。


7.描述实时系统的基本特性？【OK】
答：
在特定时间内完成特定的任务，实时性与可靠性。

所谓“实时操作系统”，实际上是指操作系统工作时，其各种资源可以根据需要【随时进行动态分配】。
由于各种资源可以进行动态分配，因此其处理事务的能力较强、速度较快。 应该说，实时操作系统是在早期的操作系统基础上发展起来的，
早期的操作系统的各种资源都是事先已经分配好的，工作期间这些资源不能再重新进行分配。因此其处理事务的能力较差、速度较慢，现在则称之为“非实时操作系统”。
但“非实时操作系统”诞生时，其功能、性能等在当时也是非常强的，人们在未认识到更好的操作系统之前并不将其这样称呼。将来如果新的、功能更强的、实时性能更高的操作系统出现，也许现在称之为“实时”的操作系统则可能将让位于新的“实时操作系统”了。
从这方面讲“实时操作系统”是一个相对的概念的。


8.全局变量和局部变量在内存中有什么区别？【OK】
答：
a.生存周期不同：
    全局变量:全局区（静态区）（static）：全局变量和静态变量是存储在一起的，初始化过的全局变量和静态变量在同一块区域，未初始化的全局变量和静态变量存放在一块相邻的区域内。
    此区域由系统在程序结束后释放
    局部变量： 放在堆栈中。由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈
b.作用范围不同：
    全局变量具有全局作用域。全局变量只需在一个源文件中定义，就可以作用于所有的源文件。当然，其他不包含全局变量定义的源文件需要用extern 关键字再次声明这个全局变量。
    局部变量也只有局部作用域，它是自动对象（auto），它在程序运行期间不是一直存在，而是只在函数执行期间存在，函数的一次调用执行结束后，变量被撤销，其所占用的内存也被收回


9.什么是平衡二叉树？【重要OK】
答：
平衡二叉树（Balanced Binary Tree）又被称为AVL树（有别于AVL算法），且具有以下性质：
它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。
构造与调整方法平衡二叉树的常用算法有红黑树、AVL、Treap等。
最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。


10.堆栈溢出一般是由什么原因导致的？【OK】
答：
堆栈溢出一般是循环的递归调用导致的,如果使用的大数据结构的局部变量,也可能导致。


12.Internet采用哪种网络协议？该协议的主要层次结构？【OK】
答：
TCP/IP协议.
分层: 应用层 传输层 网络层 网络接口层












