1.学习dubbo的知识点：
    1.官网地址：http://dubbo.apache.org/zh-cn/
    2.概念：Apache Dubbo是一款高性能、轻量级的开源Java RPC框架，
           它提供了三大核心能力：
                面向接口的远程方法调用，
                智能容错和负载均衡，
                以及服务自动注册和发现。
           最新版本为：2.7.4.1
           Dubbo的默认端口是20880
    3.Dubbo生态系统：http://dubbo.apache.org/zh-cn/ecology/index.html 🌿🌿🌿🌿🌿
        Forking集群，RoundRobbin负载均衡，HTTP协议，Netty传输，fastjson序列化
        zookeeper注册中心，etcd配置中心，Hystrix熔断器，
        Dubbo proxy网关，seata事务，Hystrix可靠性，OAuth授权，RocketMQ事件，Swagger openAPI.
        Initialnizr Bootstrap, java SDK, springboot api, idea开发工具
        prometheus监控，zipkin追踪，elasticsearch日志，arthas诊断，chaosblade混沌工程
    4.脚手架：Dubbo Initializr 快速生成基于Spring Boot的Dubbo项目 🌿🌿🌿🌿🌿
    5.Dubbo文档学习：
        1.架构原理：
            服务容器(Container)负责启动，加载，运行服务提供者。
            服务提供者(Provider)在启动时，向注册中心注册自己提供的服务。
            服务消费者(Consumer)在启动时，向注册中心订阅自己所需的服务。
            注册中心(Registry)返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
            服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
            服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心(Monitor)。
        2.用法：
            本地服务Spring配置：local.xml:
                <bean id=“xxxService” class=“com.xxx.XxxServiceImpl” />
                <bean id=“xxxAction” class=“com.xxx.XxxAction”>
                    <property name=“xxxService” ref=“xxxService” />
                </bean>
            远程服务Spring配置：
                将上面的local.xml配置拆分成两份，将服务定义部分放在服务提供方remote-provider.xml，
                将服务引用部分放在服务消费方remote-consumer.xml。
                并在提供方增加暴露服务配置<dubbo:service>，在消费方增加引用服务配置 <dubbo:reference>。
                remote-provider.xml:
                    <bean id=“xxxService” class=“com.xxx.XxxServiceImpl” />
                    <dubbo:service interface=“com.xxx.XxxService” ref=“xxxService” />
                remote-consumer.xml:
                    <dubbo:reference id=“xxxService” interface=“com.xxx.XxxService” />
                    <bean id=“xxxAction” class=“com.xxx.XxxAction”>
                        <property name=“xxxService” ref=“xxxService” />
                    </bean>
        3.快速启动：
            Dubbo采用全Spring配置方式，透明化接入应用，对应用没有任何API侵入，只需用Spring加载Dubbo的配置即可
            Dubbo基于Spring的Schema扩展进行加载。
            服务提供者：🌿🌿🌿🌿🌿
                服务接口：DemoService.java
                    package org.apache.dubbo.demo;
                    public interface DemoService {
                        String sayHello(String name);
                    }
                实现接口：DemoServiceImpl.java
                    package org.apache.dubbo.demo.provider;
                    import org.apache.dubbo.demo.DemoService;
                    public class DemoServiceImpl implements DemoService {
                        public String sayHello(String name) {
                            return "Hello " + name;
                        }
                    }
                spring配置声明暴露服务：provider.xml
                    <?xml version="1.0" encoding="UTF-8"?>
                    <beans xmlns="http://www.springframework.org/schema/beans"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
                        xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                        http://dubbo.apache.org/schema/dubbo
                        http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

                        <dubbo:application name="hello-world-app"  />
                        <dubbo:registry address="multicast://224.5.6.7:1234" />
                        <dubbo:protocol name="dubbo" port="20880" />
                        <dubbo:service interface="org.apache.dubbo.demo.DemoService" ref="demoService" />
                        <bean id="demoService" class="org.apache.dubbo.demo.provider.DemoServiceImpl" />
                    </beans>
                加载Spring配置：Provider.java
                    import org.springframework.context.support.ClassPathXmlApplicationContext;
                    public class Provider {
                        public static void main(String[] args) throws Exception {
                            ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                                new String[] {"http://10.20.160.198/wiki/display/dubbo/provider.xml"}
                            );
                            context.start();
                            System.in.read(); // 按任意键退出
                        }
                    }
            服务消费者：🌿🌿🌿🌿🌿
                通过Spring配置引用远程服务：consumer.xml
                    <?xml version="1.0" encoding="UTF-8"?>
                    <beans xmlns="http://www.springframework.org/schema/beans"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
                        xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                        http://dubbo.apache.org/schema/dubbo
                        http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

                        <!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->
                        <dubbo:application name="consumer-of-helloworld-app"  />
                        <dubbo:registry address="multicast://224.5.6.7:1234" />
                        <dubbo:reference id="demoService" interface="org.apache.dubbo.demo.DemoService" />
                    </beans>
                加载Spring配置，并调用远程服务：Consumer.java
                    import org.springframework.context.support.ClassPathXmlApplicationContext;
                    import org.apache.dubbo.demo.DemoService;
                    public class Consumer {
                        public static void main(String[] args) throws Exception {
                            ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                                new String[] {"http://10.20.160.198/wiki/display/dubbo/consumer.xml"}
                            );
                            context.start();
                            DemoService demoService = (DemoService)context.getBean("demoService"); // 获取远程服务代理
                            String hello = demoService.sayHello("world"); // 执行远程方法
                            System.out.println( hello ); // 显示调用结果
                        }
                    }
        4.配置：
            XML配置：
                Provider.xml:
                <beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
                       xmlns="http://www.springframework.org/schema/beans"
                       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
                    <dubbo:application name="demo-provider"/>
                    <dubbo:registry address="zookeeper://127.0.0.1:2181"/>
                    <dubbo:protocol name="dubbo" port="20890"/>
                    <bean id="demoService" class="org.apache.dubbo.samples.basic.impl.DemoServiceImpl"/>
                    <dubbo:service interface="org.apache.dubbo.samples.basic.api.DemoService" ref="demoService"/>
                </beans>

                Consumer.xml:
                <beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
                       xmlns="http://www.springframework.org/schema/beans"
                       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
                    <dubbo:application name="demo-consumer"/>
                    <dubbo:registry group="aaa" address="zookeeper://127.0.0.1:2181"/>
                    <dubbo:reference id="demoService" check="false" interface="org.apache.dubbo.samples.basic.api.DemoService"/>
                </beans>

                相同属性的不同粒度配置的覆盖关系：
                    消费方方法级别--》提供方方法级别--》消费方接口级别--》提供方接口级别--》消费方全局级别--》提供方全局级别
            属性配置：
                dubbo.properties作为默认配置。也可以启动参数指定：-Ddubbo.properties.file=xxx.properties。
                映射规则：可以将xml的tag名和属性名组合起来，用‘.’分隔。每行一个属性。
                    举例：dubbo.application.name=foo 相当于 <dubbo:application name="foo" />
                         dubbo.protocol.rmi.port=1099 相当于 <dubbo:protocol id="rmi" name="rmi" port="1099" />
                    配置举例：
                        dubbo.application.name=foo
                        dubbo.application.owner=bar
                        dubbo.registry.address=10.20.153.10:9090
                属性的重写与优先级：
                    优先级：JVM -D --> XML配置(dubbo.xml) --> Properties默认配置(dubbo.properties)
            API配置：API仅用于OpenAPI,ESB,Test,Mock等系统集成。生产请使用xml配置
                API属性与配置项一对一。比如：ApplicationConfig.setName("xxx") 对应 <dubbo:application name="xxx" />
                服务提供者：
                    XxxService xxxService = new XxxServiceImpl();
                    ApplicationConfig application = new ApplicationConfig();
                    application.setName("xxx");

                    RegistryConfig registry = new RegistryConfig();
                    registry.setAddress("10.20.130.230:9090");
                    registry.setUsername("aaa");
                    registry.setPassword("bbb");

                    ProtocolConfig protocol = new ProtocolConfig();
                    protocol.setName("dubbo");
                    protocol.setPort(12345);
                    protocol.setThreads(200);

                    // 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口
                    // 服务提供者暴露服务配置
                    ServiceConfig<XxxService> service = new ServiceConfig<XxxService>();
                    service.setApplication(application);
                    service.setRegistry(registry); // 多个注册中心可以用setRegistries()
                    service.setProtocol(protocol); // 多个协议可以用setProtocols()
                    service.setInterface(XxxService.class);
                    service.setRef(xxxService);
                    service.setVersion("1.0.0");
                    // 暴露及注册服务
                    service.export();
                服务消费者：
                    ApplicationConfig application = new ApplicationConfig();
                    application.setName("yyy");

                    RegistryConfig registry = new RegistryConfig();
                    registry.setAddress("10.20.130.230:9090");
                    registry.setUsername("aaa");
                    registry.setPassword("bbb");

                    // 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接
                    // 引用远程服务
                    ReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();
                    reference.setApplication(application);
                    reference.setRegistry(registry); // 多个注册中心可以用setRegistries()
                    reference.setInterface(XxxService.class);
                    reference.setVersion("1.0.0");

                    XxxService xxxService = reference.get();
                特殊场景：
                    方法级设置：
                        List<MethodConfig> methods = new ArrayList<MethodConfig>();
                        MethodConfig method = new MethodConfig();
                        method.setName("createXxx");
                        method.setTimeout(10000);
                        method.setRetries(0);
                        methods.add(method);
                        //引用远程服务
                        ReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();
                        reference.setMethods(methods);
                    点对点直连：
                        ReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();
                        // 如果点对点直连，可以用reference.setUrl()指定目标地址，设置url后将绕过注册中心，
                        reference.setUrl("dubbo://10.20.130.230:20880/com.xxx.XxxService");
            注解配置： 本质是另一个格式的对象注入🌿🌿🌿🌿🌿
                服务提供方：
                    Service注解暴露服务：
                        @Service
                        public class AnnotationServiceImpl implements AnnotationService {
                            @Override
                            public String sayHello(String name) {
                                return "annotation: hello, " + name;
                            }
                        }
                    增加应用共享配置：dubbo-provider.properties
                        dubbo.application.name=annotation-provider
                        dubbo.registry.address=zookeeper://127.0.0.1:2181
                        dubbo.protocol.name=dubbo
                        dubbo.protocol.port=20880
                    指定Spring扫描路径：
                        @Configuration
                        @EnableDubbo(scanBasePackages = "org.apache.dubbo.samples.simple.annotation.impl")
                        @PropertySource("classpath:/spring/dubbo-provider.properties")
                        static public class ProviderConfiguration {    }
                服务消费方：
                    Reference注解引用服务：
                        @Component("annotationAction")
                        public class AnnotationAction {
                            @Reference
                            private AnnotationService annotationService;
                            public String doSayHello(String name) {
                                return annotationService.sayHello(name);
                            }
                        }
                    增加应用共享配置：dubbo-consumer.properties
                        dubbo.application.name=annotation-consumer
                        dubbo.registry.address=zookeeper://127.0.0.1:2181
                        dubbo.consumer.timeout=3000
                    指定Spring扫描路径：
                        @Configuration
                        @EnableDubbo(scanBasePackages = "org.apache.dubbo.samples.simple.annotation.action")
                        @PropertySource("classpath:/spring/dubbo-consumer.properties")
                        @ComponentScan(value = {"org.apache.dubbo.samples.simple.annotation.action"})
                        static public class ConsumerConfiguration {    }
                    调用服务：
                        public static void main(String[] args) throws Exception {
                            AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);
                            context.start();
                            final AnnotationAction annotationAction = (AnnotationAction) context.getBean("annotationAction");
                            String hello = annotationAction.doSayHello("world");
                        }
            动态配置中心：
                职责：外部化配置。启动配置的集中式存储（简单理解为dubbo.properties的外部化存储）
                     服务治理。服务治理规则的存储与通知。
                启用动态配置：<dubbo:config-center address="zookeeper://127.0.0.1:2181"/>
                            dubbo.config-center.address=zookeeper://127.0.0.1:2181

                            ConfigCenterConfig configCenter = new ConfigCenterConfig();
                            configCenter.setAddress("zookeeper://127.0.0.1:2181");
                外部化配置：
                    目的之一是实现配置的集中式管理。外部化配置默认较本地配置有更高的优先级，因此这里配置的内容会覆盖本地配置值-Ddubbo.config-center.highest-priority=false
                    所谓Dubbo对配置中心的支持，本质上就是把.properties从远程拉取到本地，然后和本地的配置做一次融合
                        dubbo.registry.address=zookeeper://127.0.0.1:2181
                        dubbo.registry.simplified=true
                        dubbo.metadata-report.address=zookeeper://127.0.0.1:2181
                        dubbo.protocol.name=dubbo
                        dubbo.protocol.port=20880
                        dubbo.application.qos.port=33333
                    配置举例：
                        <dubbo:config-center address="zookeeper://127.0.0.1:2181"/>
                        <dubbo:config-center protocol="apollo" address="127.0.0.1:2181"/>
                    节点结构：默认所有的配置都存储在/dubbo/config
                        namespace --> 固定节点 --> 默认全局节点dubbo;应用级application
                    加载外部化配置：
                        Map<String, String> dubboConfigurations = new HashMap<>();
                        dubboConfigurations.put("dubbo.registry.address", "zookeeper://127.0.0.1:2181");
                        dubboConfigurations.put("dubbo.registry.simplified", "true");
                        //将组织好的配置塞给Dubbo框架
                        ConfigCenterConfig configCenter = new ConfigCenterConfig();
                        configCenter.setExternalConfig(dubboConfigurations);
            配置加载流程：
                应用启动阶段，Dubbo框架如何将所需要的配置采集起来（包括应用配置、注册中心配置、服务配置等），以完成服务的暴露和引用流程。
                配置格式以Properties为主
                配置来源和优先级：默认有4种，从上到下优先级逐步降低
                    JVM System Properties，-D参数
                    Externalized Configuration，外部化配置
                    ServiceConfig、ReferenceConfig等编程接口采集的配置
                    本地配置文件dubbo.properties
                配置格式：
                    # 应用级别
                    dubbo.{config-type}[.{config-id}].{config-item}={config-item-value}
                    # 服务级别
                    dubbo.service.{interface-name}[.{method-name}].{config-item}={config-item-value}
                    dubbo.reference.{interface-name}[.{method-name}].{config-item}={config-item-value}
                    # 多配置项
                    dubbo.{config-type}s.{config-id}.{config-item}={config-item-value}
                编程配置方式：
                    xml:
                        <dubbo:application name="demo-provider"/>
                        <dubbo:config-center address="zookeeper://127.0.0.1:2181"/>
                        <dubbo:registry address="zookeeper://127.0.0.1:2181" simplified="true"/>
                        <dubbo:metadata-report address="redis://127.0.0.1:6379"/>
                        <dubbo:protocol name="dubbo" port="20880"/>
                        <bean id="demoService" class="org.apache.dubbo.samples.basic.impl.DemoServiceImpl"/>
                        <dubbo:service interface="org.apache.dubbo.samples.basic.api.DemoService" ref="demoService"/>
                    annotation:
                        @Service
                        public class AnnotationServiceImpl implements AnnotationService {
                          @Override
                          public String sayHello(String name) {
                              System.out.println("async provider received: " + name);
                              return "annotation: hello, " + name;
                          }
                        }

                        dubbo.application.name=annotation-provider
                        dubbo.registry.address=zookeeper://127.0.0.1:2181
                        dubbo.protocol.name=dubbo
                        dubbo.protocol.port=20880
                    spring boot:
                        spring.application.name=dubbo-externalized-configuration-provider-sample
                        dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service
                        dubbo.protocol.name=dubbo
                        dubbo.protocol.port=12345
                        dubbo.registry.address=N/A
                        demo.service.version=1.0.0
                    api:
                        public static void main(String[] args) throws IOException {
                            ServiceConfig<GreetingsService> service = new ServiceConfig<>();
                            service.setApplication(new ApplicationConfig("first-dubbo-provider"));
                            service.setRegistry(new RegistryConfig("multicast://224.5.6.7:1234"));
                            service.setInterface(GreetingsService.class);
                            service.setRef(new GreetingsServiceImpl());
                            service.export();
                            System.out.println("first-dubbo-provider is running.");
                            System.in.read();
                        }
            自动加载环境变量：dubbo.labels和dubbo.env.keys
                -Ddubbo.labels = "tag1=value1; tag2=value2"
                DUBBO_LABELS = "tag1=value1; tag2=value2"

                -Ddubbo.env.keys = "DUBBO_TAG1, DUBBO_TAG2"
                DUBBO_ENV_KEYS = "DUBBO_TAG1, DUBBO_TAG2"
        5.Dubbo实例操作：
            启动时检查：检查依赖，默认check="true"。配置文件关闭检查如下：
                Spring配置：
                    <dubbo:reference interface="com.foo.BarService" check="false" />
                    <dubbo:consumer check="false" />
                    <dubbo:registry check="false" />
                dubbo.properties:
                    dubbo.reference.com.foo.BarService.check=false
                    dubbo.reference.check=false
                    dubbo.consumer.check=false
                    dubbo.registry.check=false
                通过-D参数
                    java -Ddubbo.reference.com.foo.BarService.check=false
                    java -Ddubbo.reference.check=false
                    java -Ddubbo.consumer.check=false
                    java -Ddubbo.registry.check=false
            集群容错：缺省failover重试
                集群容错模式：
                    Failover: 失败自动切换，当出现失败，重试其它服务器。读操作
                        <dubbo:service retries="2" />
                        <dubbo:reference retries="2" />
                        <dubbo:reference>
                            <dubbo:method name="findFoo" retries="2" />
                        </dubbo:reference>
                    Failfast: 快速失败，只发起一次调用，失败立即报错。新增记录
                    Failsafe: 失败安全，出现异常时，直接忽略。写日志
                    Failback: 失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。
                    Forking: 并行调用多个服务器，只要一个成功即返回。实时性较高操作
                    Broadcast: 广播调用所有提供者，逐个调用，任意一台报错则报错。更新缓存和日志
                集群模式配置：
                    <dubbo:service cluster="failsafe" />
                    <dubbo:reference cluster="failsafe" />
            负载均衡：
                多个均衡策略：
                    随机调用： 默认值
                    轮询调用：
                    最少活跃调用数调用：不活跃的分的少
                    一致性hash调用：相同参数的请求总是发到同一提供者
                配置：
                    <dubbo:service interface="..." loadbalance="roundrobin" />
                    <dubbo:service interface="...">
                        <dubbo:method name="..." loadbalance="roundrobin"/>
                    </dubbo:service>

                    <dubbo:reference interface="..." loadbalance="roundrobin" />
                    <dubbo:reference interface="...">
                        <dubbo:method name="..." loadbalance="roundrobin"/>
                    </dubbo:reference>
            只订阅不注册的服务提供方：
                禁用注册配置：<dubbo:registry address="10.20.153.10:9090" register="false" />
                            <dubbo:registry address="10.20.153.10:9090?register=false" />
            静态服务：
                <dubbo:registry address="10.20.141.150:9090" dynamic="false" />
                <dubbo:registry address="10.20.141.150:9090?dynamic=false" />
            多协议：
                Dubbo允许配置多协议，在不同服务上支持不同协议或者同一服务上同时支持多种协议
                大数据用短连接协议，小数据大并发用长连接协议等
                <?xml version="1.0" encoding="UTF-8"?>
                <beans xmlns="http://www.springframework.org/schema/beans"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
                    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

                    <dubbo:application name="world"  />
                    <dubbo:registry id="registry" address="10.20.141.150:9090" username="admin" password="hello1234" />
                    <dubbo:protocol name="dubbo" port="20880" />
                    <dubbo:protocol name="rmi" port="1099" />
                    <dubbo:service interface="com.alibaba.hello.api.HelloService" version="1.0.0" ref="helloService" protocol="dubbo" />
                    <dubbo:service interface="com.alibaba.hello.api.DemoService" version="1.0.0" ref="demoService" protocol="rmi" />

                    <!-- 使用多个协议暴露服务 -->
                    <dubbo:service id="helloService" interface="com.alibaba.hello.api.HelloService" version="1.0.0" protocol="dubbo,hessian" />
                </beans>
            多注册中心：
                多个注册中心，只注册其中一个：
                    <dubbo:registry id="hzRegistry" address="10.20.153.10:9090" />
                    <dubbo:registry id="qdRegistry" address="10.20.141.150:9090" subscribe="false" />
                统一服务多个中心：
                    <dubbo:registry id="hangzhouRegistry" address="10.20.141.150:9090" />
                    <dubbo:registry id="qingdaoRegistry" address="10.20.141.151:9010" default="false" />

                    <dubbo:service interface="com.alibaba.hello.api.HelloService" version="1.0.0" ref="helloService" registry="hangzhouRegistry,qingdaoRegistry" />
                不同服务不同注册中心：
                    <dubbo:registry id="chinaRegistry" address="10.20.141.150:9090" />
                    <dubbo:registry id="intlRegistry" address="10.20.154.177:9010" default="false" />

                    <dubbo:service interface="com.alibaba.hello.api.HelloService" version="1.0.0" ref="helloService" registry="chinaRegistry" />
                    <dubbo:service interface="com.alibaba.hello.api.DemoService" version="1.0.0" ref="demoService" registry="intlRegistry" />
            服务分组：一个接口多个实现,使用group区分
                <dubbo:service group="feedback" interface="com.xxx.IndexService" />
                <dubbo:service group="member" interface="com.xxx.IndexService" />

                <dubbo:reference id="feedbackIndexService" group="feedback" interface="com.xxx.IndexService" />
                <dubbo:reference id="memberIndexService" group="member" interface="com.xxx.IndexService" />

                <dubbo:reference id="barService" interface="com.foo.BarService" group="*" />
            使用版本解决服务的升级问题：
                操作步骤：
                    0.在低压力时间段，先升级一半提供者为新版本
                    1.再将所有消费者升级为新版本
                    2.然后将剩下的一半提供者升级为新版本
                <dubbo:service interface="com.foo.BarService" version="1.0.0" />
                <dubbo:reference id="barService" interface="com.foo.BarService" version="1.0.0" />
            分组聚合：将返回结果进行合并
                <dubbo:reference interface="com.xxx.MenuService" group="*" merger="true">
                    <dubbo:method name="getMenuItems" merger="false" />     //  false为某个方法不合并，true为只合并填写的方法，特定字符串表明使用指定合并器
                </dubbo:reference>
            参数验证：各种注解
                jar包依赖：<dependency>
                           <groupId>javax.validation</groupId>
                           <artifactId>validation-api</artifactId>
                           <version>1.0.0.GA</version>
                          </dependency>
                          <dependency>
                           <groupId>org.hibernate</groupId>
                           <artifactId>hibernate-validator</artifactId>
                           <version>4.2.0.Final</version>
                          </dependency>
                具体注解：@NotNUll
                        @Size(min=1,max=20)
                        @NotNull(groups = ValidationService.Save.class) //保存时不允许为空，更新时允许为空 ，表示不更新该字段
                        @Min(18)
                        @Max(100)
                        @Past
                        @Future
                        <dubbo:reference id="validationService" interface="org.apache.dubbo.examples.validation.api.ValidationService" validation="true" />
            结果缓存：🌿🌿🌿🌿🌿
                缓存类型：
                    lru：最近最少使用
                    threadlocal: 线程缓存
                    jcache: 桥接各种缓存实现
                举例配置：
                    <dubbo:reference interface="com.foo.BarService" cache="lru" />
                    <dubbo:reference interface="com.foo.BarService">
                        <dubbo:method name="findBar" cache="lru" />
                    </dubbo:reference>
            使用泛化调用：类似于反射，通用服务调用🌿🌿🌿🌿🌿
                spring方式：
                    <dubbo:reference id="barService" interface="com.foo.BarService" generic="true" />

                    GenericService barService = (GenericService) applicationContext.getBean("barService");
                    Object result = barService.$invoke("sayHello", new String[] { "java.lang.String" }, new Object[] { "World" });
                API方式：
                    ReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();
                    reference.setInterface("com.xxx.XxxService");
                    reference.setVersion("1.0.0");
                    reference.setGeneric(true);

                    GenericService genericService = reference.get();
                    Object result = genericService.$invoke("sayHello", new String[] {"java.lang.String"}, new Object[] {"world"});

                    Map<String, Object> person = new HashMap<String, Object>();
                    person.put("name", "xxx");
                    person.put("password", "yyy");
                    Object result = genericService.$invoke("findPerson", new String[]{"com.xxx.Person"}, new Object[]{person});
            回声测试：EchoService被自动实现，强转后可用于监控
                <dubbo:reference id="memberService" interface="com.xxx.MemberService" />

                MemberService memberService = ctx.getBean("memberService");
                EchoService echoService = (EchoService) memberService; // 强制转型为EchoService
                String status = echoService.$echo("OK");
                assert(status.equals("OK"));
            上下文和隐式参数：RpcContext和setAttachment
                RpcContext.getContext().setAttachment("index", "1");
                String index = RpcContext.getContext().getAttachment("index");
            Dubbo的异步调用：CompletableFuture🌿🌿🌿🌿🌿
                    CompletableFuture<String> future = asyncService.sayHello("async call request");
                    future.whenComplete((v, t) -> {
                        if (t != null) {
                            t.printStackTrace();
                        } else {
                            System.out.println("Response: " + v);
                        }
                    });
                    System.out.println("Executed before response return.");
                使用RpcContext:
                    <dubbo:reference id="asyncService" interface="org.apache.dubbo.samples.governance.api.AsyncService">
                          <dubbo:method name="sayHello" async="true" />
                    </dubbo:reference>
                    //下面两个缺一不可
                    asyncService.sayHello("world");
                    CompletableFuture<String> helloFuture = RpcContext.getContext().getCompletableFuture();
                    helloFuture.whenComplete((retValue, exception) -> {
                        if (exception == null) {
                            System.out.println(retValue);
                        } else {
                            exception.printStackTrace();
                        }
                    });

                    或者如下调用：
                    CompletableFuture<String> future = RpcContext.getContext().asyncCall(
                        () -> {
                            asyncService.sayHello("oneway call request1");
                        }
                    );
                    future.get();
                使用AsyncContext：
                    AsyncContext asyncContext = RpcContext.startAsync();
                    new Thread(() -> {
                        asyncContext.signalContextSwitch();
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        asyncContext.write("Hello " + name + ", response from provider.");
                    }).start();
            本地伪装【熔断操作】：🌹🌹🌹mock后的操作表示模式的熔断操作
                <dubbo:reference interface="com.foo.BarService" mock="true" />
                <dubbo:reference interface="com.foo.BarService" mock="com.foo.BarServiceMock" />
                高级用法：
                    <dubbo:reference interface="com.foo.BarService" mock="return null" />
                    <dubbo:reference interface="com.foo.BarService" mock="throw" />
                    <dubbo:reference interface="com.foo.BarService" mock="throw com.foo.MockException" />
                    <dubbo:reference interface="com.foo.BarService" mock="force:return fake" />
                    <dubbo:reference id="demoService" check="false" interface="com.foo.BarService">
                        <dubbo:parameter key="sayHello.mock" value="force:return fake"/>
                    </dubbo:reference>
            延迟暴露：适用于服务需要初始化时间
                <dubbo:service delay="-1" />
                <dubbo:service delay="5000" />
                可能主线的死锁解决办法：
                    强烈建议不要在服务的实现类中有applicationContext.getBean() 的调用，全部采用 IoC 注入的方式使用 Spring的Bean。
            并发控制和连接控制：
                并发控制：
                    <dubbo:service interface="com.foo.BarService" executes="10" />      //服务端
                    <dubbo:service interface="com.foo.BarService" actives="10" />       //客户端
                    <dubbo:service interface="com.foo.BarService">
                        <dubbo:method name="sayHello" actives="10" />
                    </dubbo:service>
                    <dubbo:reference interface="com.foo.BarService" loadbalance="leastactive" />    //  负载均衡
                连接控制：
                    <dubbo:provider protocol="dubbo" accepts="10" />    //  服务端
                    <dubbo:reference interface="com.foo.BarService" connections="10" />     //  客户端
                    <dubbo:protocol name="dubbo" lazy="true" />
                    <dubbo:reference id="xxxService" interface="com.xxx.XxxService" sticky="true" />    //保证有状态服务连接同一个服务提供者
            令牌验证：设置消费者和提供者的权限🌿🌿🌿🌿🌿
                1.提供者产生令牌，发送到注册中心
                2.消费者请求服务，注册中心发送令牌给消费者
                3.消费者发送令牌和请求给提供者
                4.提供者验证令牌并返回响应信息

                可以在全局/服务级别开启令牌：
                    <dubbo:provider interface="com.foo.BarService" token="true" />  //随机令牌
                    <dubbo:provider interface="com.foo.BarService" token="123456" />
                    <dubbo:service interface="com.foo.BarService" token="true" />
未完待续......








