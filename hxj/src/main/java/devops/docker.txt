学习docker的语法：
    1.概述: docker是一种容器技术，作用是用来快速部署服务。
           入门教程地址：http://www.docker.org.cn/book/docker/what-is-docker-16.html
           它是一个开源引擎，可以为应用创建容器。

           类==镜像
           对象==容器
    2.项目部署的四个阶段：
        阶段1：手动在服务器上安装数据库，安装sdk,安装缓存等等
        阶段2：编写bash脚本，将需要安装的软件都写在脚本中，但是bash脚本编写困难
        阶段3：将系统做成镜像存储到光盘，部署时做一个新系统。但是距离远，集群大，更新快会造成问题
        阶段4：将服务安装进docker中。做好的镜像在远端仓库中，可以拉取下来，通过命令启动服务。
    3.docker概念：
        镜像：一个系统的镜像，就和光盘拷贝的linux版本的磁盘镜像
        容器：一个镜像的实例。或者说通过虚拟机，使用镜像来创建的一个虚拟机实例
        镜像仓库hub: 就和代码仓库github一样，云端存储了大量的镜像。
        性能损耗：linux内核的namespace，可以直达内耗的容器。
    4.常用命令：
        docker search 镜像名： 搜索镜像
        git/docker pull 镜像名：下载镜像  【镜像是按照(用户名/镜像名)的格式来存储的】
        docker images: 查看已经下载好的镜像
        docker rmi 镜像名：删除指定镜像
        docker run 镜像名：启动镜像名

        docker container ls: 查看所有创建的容器
        docker logs 容器名：查看容器日志
        docker stop 容器名：停止一个容器的实例
        docker stats 容器名： 查看容器状态

        🌿🌿🌿🌿🌿
        docker pull:拉取最新的镜像
    5.环境准备：
        docker有服务端和客户端。服务端是一个服务进程，管理所有的容器。docker镜像的官方仓库地址：https://hub.docker.com
            docker hub的账户密码：hexingjiehao/xj15928286403
        docker容器可以理解为在沙盒中运行的进程。沙盒-->运行进程来启动容器-->该进程是容器的唯一进程
        hello world：随便使用镜像创建一个容器实例，然后打印命令。
            docker run 镜像名 命令(echo "hello ,world")
        可以在启动容器时，在镜像内部安装程序，需要携带-y参数。比如docker run learn/tutorial apt-get install -y ping
        保存容器更改的状态：1.获取修改后的容器id:  docker ps -l
                         2.保存容器状态，修改镜像名并提交：docker commit 新id 镜像的版本号
        查看运行中的镜像： docker ps id
                        docker inspect id
        发布镜像到官网：docker push 镜像名

学习docker-compose的语法：
    1.概述：docker-compose是用来做docker的多容器控制。
           docker-compose是一个用来把docker自动化的东西。通过docker-compose,可以把繁复的docker操作全部一条命令，自动化完成。
    2.为什么使用docker-compose,解决了什么：
        手动docker步骤：1.找系统镜像: docker search
                       2.安装虚拟机：apt-get install docker
                       3.虚拟机安装镜像：docker run -d -it 镜像  ......
        使用docker-compose自动化操作：1.创建docker-compose.file文件
                                    2.在文件中编写脚本命令
                                    3.执行脚本，运行命令docker-compose up -d
        安装docker-compose: pip install docker-compose
    3.常用命令：
        docker-compose version: 显示docker-compose版本信息
        docker-compose start 容器名: 开启服务
        docker-compose restart 容器名: 重启服务
        docker-compose stop 容器名: 停止服务

        docker-compose up: 创建并启动容器
        docker-compose ps: 显示容器
        docker-compose kill: 杀掉容器
        docker-compose rm 容器名: 删除停止的容器
        docker-compose down: 停止并移除所有的容器，镜像等

        🌿🌿🌿🌿🌿🌿
        docker-compose pull：拉取最新的镜像


关于docker-compose.yml配置文件编写详细：使用SHORT语法 和 LONG语法。
    定义：它可以定义服务(docker container create)，网络(docker network create)和挂载卷(docker volume create)

标准内容格式如下：主要的部分包含version,services,networks
    二级部分包含image，build。这两个的作用是一致的，一个通过直接指定，一个通过Dockerfile文件指定

------------------------------docker-compose.yml开始-----------------------------------------
version: "版本"
services:
    自定义服务名字：
        image: "具体的镜像名"
        contailner_name: "自定义容器名"
        labels：
            - "key1=value1"
            ......(给容器添加元数据,类似于初始化参数)
        ports:
          - 具体端口(8080) 或者 端口映射(80:80)  #前者是自定义端口，后者是服务的固定端口
          ......
        environment：
            镜像变量名1："取值"
            ......
        depends_on:   #用于解决容器的启动先后顺序，也就是依赖
            已经创建的服务名1：
                condition:service_healthy
            ......
        volumes： #在容器内挂载一个本地目录，也就是文件映射，主要用于存储容器产生的数据
            - "具体路径"
            - "数据卷(盘符)：路径"
            ......
        command: "设置容器启动后执行的命令"
        networks:
            - 指定网络1
            ......
    下一个服务名字：
            ......

------------------------------docker-compose.yml结束-----------------------------------------

使用docker的三步走：
    1.在DockerFile中定义应用的运行环境
    2.在docker-compose.yml中定义应用的所需服务
    3.启动docker-compose up
    4.验证docker-compose ps

一定要注意yml文件中的空格陷阱



