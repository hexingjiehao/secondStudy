1.网络协议分层：
OSI七层协议模型：                                业界五层模型：      TCP/IP的四层结构：
应用层  (程序间协议)                             应用层              应用层
表示层: (数据的转换翻译)                          运输层              运输层
会话层：(不同机器会话)                            网络层              网络层
传输层: (端口到端口，TCP/UDP)                     数据链路层          网络接口层
网络层: (主机到主机，分组传输，路由选择。IP协议)     物理层
数据链路层： (逻辑传输线路)
物理层：(比特流传输)

2.数据包格式：(从上到下逐层封装)
    Http数据举例：
    以太网首部[Ip首部[Tcp首部[http数据]]]

3.常用的传输层协议
    TCP协议：(面向连接，可靠，基于字节流,慢)
        TCP对象头常用的东西：
            源端口和目的端口
            序列号
            确认号
        IP对象头常用的东西：
            源IP地址和目的IP地址
        应用场景：点对点。qq单人视频聊天
        连接机制：(实质是初始化序列号)
            3次握手：(大写是状态，小写是值)
                1.client发请求SYN=1,seq=x
                2.Server响应ACK=1,ack=x+1,并发请求SYN=1,seq=y,
                3.client响应ACK=1,ack=y+1,并发新序列号seq=x+1
                拓展：为什么TCP客户端最后还要发送一次确认呢？
                    防止已经失效的连接请求报文突然又传送到了服务器，从而产生数据错误。
            4次挥手：
                1.client发请求FIN=1，seq=u
                2.Server响应ACK=1,ack=u+1,并发请求seq=v，最后发一次数据。
                3.Server再次确认响应ACK=1,ack=u+1,然后发请求FIN=1,seq=w
                4.client响应并发送1个序号ACK=1,ack=w+1,seq=u+1
        数据的可靠性保证：
            校验和
            序列号和确认应答
            超时重传：拉回重传(从丢的地方全部重来),选择重传方式(只重来丢的地方)
            连接管理：3次握手和4次挥手
            流量控制：滑动窗口
            拥塞控制: 拥塞窗口+慢启动+拥塞避免算法
    UDP协议：(无连接,报文数据，不可靠，实时性好，快)
        应用场景：1v1,1vN, NvN。视频直播，qq文字聊天
        实现UDP的可靠通信：(封装UDP协议)
            实现确认机制、重传机制、窗口确认机制。
            RTP协议：实时视频传输协议。Java.net.rtp可用。有序传送的序列号保证可靠


4.常见的应用层协议：(应用程序之间的通讯)
    HTTP：超文本传输协议。规定浏览器和万维网服务器之间的数据传输规则。
          端口80,无状态的面向连接协议,底层是TCP。引入Cookie解决状态问题。打开网页请求的次数：1+其他资源的次数
        版本：
            HTTP 0.9：只能get,无协议头，只能纯文本。非持续性连接
            HTTP 1.0：
                支持GET、HEAD、POST方法
                请求与响应支持头域,即消息报头
                响应对象以一个响应状态行开始,不只限于超文本
                支持长连接（但默认还是使用短连接），缓存机制，以及身份认证
            HTTP 1.1：(应用广泛)
                keepalive连接：允许HTTP设备在1次请求事务处理结束之后将TCP连接保持在打开的状态，以便未来的HTTP请求重用现在的连接，直到客户端或服务器端决定将其关闭为止
                chunked编码传输：将正文实体分块传送并逐块标明长度,直到长度为0块表示传输结束
                字节范围请求：支持传送内容的一部分。设置请求中range头域来实现。在响应消息中Content-Range头域处理，成功则响应码206
                Pipelining（请求流水线）：在1个连接中,支持client一次性发送多个请求，Server一次性返回多个请求。之前是请求-响应-再请求这样循环
                请求消息和响应消息都应支持Host头域：
                    在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。因此，Host头的引入就很有必要了。
                增加请求方法：OPTIONS,PUT,DELETE,TRACE,CONNECT
                新增缓存处理： e-tags标签，Cache-Control头。
            HTTP 2.0：(使用少)
                多路复用（二进制分帧）:
                    传输性能优化,其中HTTP1.x的首部信息(请求行+请求报头+空行)会被封装到Headers帧，而我们的request body(请求正文)则封装到Data帧里面。
                头部压缩: 处理多个相似资源
                随时复位：使用RST_STREAM能够在不中断TCP连接的情况下中断数据传输
                服务器端推流: client请求资源，服务器附送资源
                优先权和依赖：给流添加优先级和依赖
        请求方法：
            GET:查
                提交数据会放在URL之后，以?分割URL和传输数据，参数之间以&相连
                数据大小有限制（因为浏览器对URL的长度有限制），
                使用Request.QueryString来取得变量的值，
                安全问题，比如窃取密码
            POST:增
                提交数据放在HTTP包的Body中,数据无大小限制
                通过Request.Form来获取变量的值
            PUT:改
            DELETE:删
        响应的状态码：
            HTTP1.1中5类状态码,状态码由三位数字组成，第一个数字定义了响应的类别
                1XX  提示信息 - 表示请求已被成功接收，继续处理
                2XX  成功 - 表示请求已被成功接收，理解，接受
                3XX  重定向 - 要完成请求必须进行更进一步的处理
                4XX  客户端错误 -  请求有语法错误或请求无法实现
                5XX  服务器端错误 -   服务器未能实现合法的请求
            常用状态码：
                200 OK：成功响应
                302 Found：重定向
                304 Not Modified：代表上次的文档已经被缓存了,还可以继续使用. (ctrl+F5强制刷新，清楚缓存)
                400 Bad Request：客户端请求与语法错误,不能被服务器所理解
                403 Forbidden: 服务器收到请求，但是拒绝提供服务
                404 Not Found：请求资源不存在
                500 Internal Server Error：服务器发生了不可预期的错误
                503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常

        工作流程：4步
            1.client与server建立连接
            2.clinet发送请求：(请求格式)
                请求行：(请求类型GET/POST，资源路径,协议名字)
                请求头部：
                    Cache头域：
                        If-Modified-Since:页面更新策略,时间比较
                        If-None-Match：请求资源的策略，ETag标记值
                        Pragma: 防止页面被缓存,等价Cache-Control:no-cache
                        Cache-Control：缓存机制
                            Public:都能缓存
                            Private:私有缓存
                            no-cache:不会缓存
                    Client头域:
                        Accept: 浏览器端接受的媒体类型
                        Accept-Encoding:浏览器接收的压缩方法
                        Accept-Language:浏览器接收的语言
                        User-Agent:客户端操作系统和浏览器的名称和版本
                        Accept-Charset:浏览器接收的字符集
                    Cookie/Login头域：
                        Cookie：解决http无状态问题,发送给服务器
                    Entity头域:
                        Content-Length：请求给服务器的数据长度
                        Content-Type: 请求给服务器的数据类型
                    Miscellaneous(混杂的)头域：
                        Referer： 提供了请求上下文信息,可用于统计来自于这个地址的用户数量
                    Transport头域：
                        Connection：连接状态
                        Host:主机
                空行
                请求数据
            3.server响应请求返回信息：(响应格式)
                状态行: (协议/版本号,状态码,状态消息)
                消息报头：
                    Cache头域：
                        Date：消息日期
                        Expires：本地缓存过期时间
                    Cookie/Login头域：
                        P3P：用于跨域设置Cookie, 这样可以解决iframe跨域访问cookie的问题
                        Set-Cookie：给客户端写入cookie
                    Entity头域:
                        ETag:请求资源的策略,和If-None-Match搭配
                        Last-Modified:资源的最后修改日期
                        Content-Type：响应对象的类型和字符集
                        Content-Length：指明响应正文的长度
                        Content-Encoding：服务器的压缩对象方法
                        Content-Language：服务器响应的语言
                    Miscellaneous(混杂的)头域:
                        Server:服务器信息
                        X-AspNet-Version: 开发网站ASP.NET的版本
                        X-Powered-By:开发网站的技术
                    Transport头域：
                        Connection：连接状态
                    Location头域：
                        Location：重定向新位置
                空行
                响应正文
            4.clinet接受响应显示在浏览器，断开连接

        HTTP协议是无状态的和Connection: keep-alive的区别：
            这是两种概念。无状态 != 无连接
            无状态：协议对于事务处理没有记忆能力,服务器不知道客户端是什么状态(服务器的角度)。
            HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）
            HTTP1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接
                Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间

    HTTPS：(参考https://www.cnblogs.com/zhangshitong/p/6478721.html)
        基于TLS,SSL应用层协议。端口443。
        “非对称加密”的加密算法，特点是私钥加密后的密文，只要是公钥，都可以解密，但是公钥加密后的密文，只有私钥可以解密。私钥只有一个人有，而公钥可以发给所有的人。
        HTTPS要安全，使用对称加密算法，
            协商对称加密算法不安全，使用非对称加密算法对这个协商过程加密
                非对称加密的过程本身也不安全，其中的公钥可能被修改，
                    为了保证公钥安全，CA对非对称加密过程 进行加密并在客户端验证的机制保证公钥安全。
            然后有了对称加密算法，就可以安心传送数据了。
    FTP：文件传输协议。c/s模式,面向连接,使用TCP/IP可靠服务。消除不同操作系统的文件不兼容
    SMTP：简单邮件传送协议。面向连接c/s模式。
    DNS: 域名解析协议。将域名转换为IP地址的Internet服务。
    MQ: 延迟消息通讯,发出消息存储到容器，特定条件出发，发送给接收端
    RPC：远程过程调用协议.springcloud和dubbo框架用到。消息实时接收,实时处理。同步场合
        通过网络从远程计算机程序上请求服务。c/s模式。传递的是进程参数
        应用场景：业务庞大，开始拆分Service组件，互相之间可以调用。应用程序之间的通讯手段。
                 主要是为了拆分代码，解耦逻辑
                 服务化,微服务,和分布式系统架构的场景
        原理：(对称性,代理,远端API,RpcConnector,RpcChannel)
            User->User-stub->UserRPCRuntime---network transalate--ServerRPCRuntime->Server-stub-Server
        RPC框架核心：
            服务暴露：
                IDL文件,WSDL文件,服务接口,数据结构,服务定义文件
                通过代码生成器生成stub代码
                java通过多态,接口的多样实现，用标记位
            远程代理对象：
                java有动态代理和字节码生成
            通信：RPC基于HTTP或者TCP,其中总webservice=RPC[http],RPC[tcp]性能更好。
                TCP/HTTP：更底层传输更快
                消息ID：可靠的请求应答消息流。定义了每个消息的唯一id
                IO方式：异步的IO,即NIO
                多连接：
                    大数据量传输时分散在不同的连接缓冲区会得到更好的吞吐效率。缓冲区要饱和状态才好
                心跳：连接是由client端发起建立并维持,内部消息，心跳位。维持连接
            序列化：
                两方面会直接影响 RPC 的性能，一是传输方式，二是序列化。
                序列化方式：二进制流传输。优秀的序列化框架，比如：Protobuf、Kryo、Hessian、Jackson
                编码内容：效率高=传输数据少+规则简单。
                xml   : 如 webservie soap
                json  : 如 JSON-RPC
                binary: 如 thrift; hession; kryo 等

    JDBC：java数据库连接协议。它是执行sql语句的API。实现与多种数据库的统一操作
        版本：
            JDBC1.0: 伴随JDK1.1
            JDBC2.0/2.1: 伴随JDK1.2/1.3。javax.sql支持连接池,分布式事物
            JDBC3.0： 伴随JDK1.4
            JDBC4.0： 伴随JDK1.6
            JDBC4.1:  伴随JDK1.7
            JDBC4.2： 伴随JDK1.8
        驱动：
            java桥接ODBC驱动：    它使用ODBC驱动连接数据库。
            本地API部分java驱动：  这种驱动把JDBC调用适配成数据库的本地接口的调用。
            纯java驱动数据库中间件：这个驱动把JDBC调用转发给中间件服务器，由它去和不同的数据库进行连接。
            纯java驱动直连数据库：  这个驱动把JDBC转化成数据库使用的网络协议。简单，网络连接，不同数据库使用不同驱动。【常用】
        建立JDBC连接步骤：
            注册并加载驱动：
            用DriverManager获取连接对象：
        常用类：
            DriverManager：驱动工厂类
            Connection:连接类
            Statement/PreparedStatement:执行(或者预编译)数据库SQL接口
                .execute():执行任意sql
                .executeQuery()：执行查询sql
                .executeUpdate():执行插，改，删操作sql
                PreparedStatement的优缺点：
                    优点：防止sql注入，自动对特殊字符转义。动态查询。执行更快
                    缺点：不能执行in查询
            ResultSet:结果集
                类型：
                    ResultSet.TYPE_FORWARD_ONLY：这是默认的类型，它的游标只能往下移。
                    ResultSet.TYPE_SCROLL_INSENSITIVE：游标可以上下移动，数据库里修改不敏感。
                    ResultSet.TYPE_SCROLL_SENSITIVE：游标可以上下移动，数据库里修改敏感。
                    并发：
                        ResultSet.CONCUR_READ_ONLY:ResultSet:只读,默认类型。
                        ResultSet.CONCUR_UPDATABLE:更新
         调用存储过程：(编译好的API。CallableStatement接口。CallableStatement stmt = con.prepareCall("{call insertEmployee(?,?,?,?,?,?)}");)
         批处理:   D://Statement.addBatch() 和D://PreparedStatement.中executeBatch()
         事务管理：每条sql执行完毕，一条事务就完成了。也可以1组sql组成1条事务。事务提交出现异常，可以会回滚。表锁管理事务耗资源
            Connection对象的rollback回滚事务。释放当前连接的数据库锁。
            多条sql组成的事务,中间可设定savepoint(检查点),可以只回滚到savepoint。提交或者回滚，检查点自动失效。
         连接池:(设定1个数量上限，初始化数量的连接对象在资源池，请求来一个，就拿一个连接出来用。用完后放回池子。请求多了在队列等着)
            DataSource对象：一个封装对象,模拟池子。里面可能有集合存储连接。
            参数：(7+2个)
                name:名字
                url：数据库连接地址
                username:用户名
                password:密码
                driverClassName：是数据库驱动的名称
                MaxActive:连接池的最大数据库连接数。设为0表示无限制。
                maxWait：最大建立连接需要等待时间。-1表示无限制。
                maxIdle:最大等待连接中的数量,设 0 为没有限制
                auth：管理权属性,Container表示容器管理
                type：对象类型。javax.sql.DataSource

         数据库隔离级别：(保证数据一致性。锁机制)
            脏读：🌹🌹🌹数据库修改了记录，并不一定代表着提交了。其他操作依然可以看到该条修改操作，但是不知道是否提交了。
                A: 更新数据未提交
                B：读刚更新的值
                原因：A可能回滚,导致B读的数据无效
            不可重复读：(前后值不一致)
                A：读数据X,处理逻辑
                B: 修改数据X
                A：自己再读X,发现值对不上了
                原因：B在A读取的过程中修改了数据。无论是否提交
            幻读：(前后sql返回数量不一致)
                A:根据条件t查询sql,得到N条记录
                B:在条件t中insert了1条数据
                A:再根据条件t查sql,两次的数量对不上了

            🌹🌹🌹：以下的这些是因为java或者sql中有自动的代码重排序功能。各种事务，就像是屏障，阻止他们进行重排序操作，也就是防止可见行。
            TRANSACTION_NONE：不支持事务
            TRANSACTION_READ_UNCOMMITTED(未提交读): 支持事务
            TRANSACTION_READ_COMMITTED(提交读)：	支持事务,阻止脏读。也就是只有别人提交了操作，别人才能看到操作，才能往下继续读操作。是防止他人读的《写屏障》
            TRANSACTION_REPEATABLE_READ(重复读): 支持事务,阻止脏读,阻止不可重复读。是一个防止他人写的《读屏障》，读屏障也保障了写屏障。记录的是值
            TRANSACTION_SERIALIZABLE(串行化): 支持事务,阻止脏读,阻止不可重复读,阻止幻读。也是是一个他人写的《读屏障》，读屏障也保障了写屏障。记录的是数量
         常用JDBC异常：
            java.sql.SQLException:基类。
            java.sql.BatchUpdateException:批处理异常
            java.sql.SQLWarning：警告信息。
            java.sql.DataTruncation:字段值被截断了（不是因为超过对应字段类型的长度限制）
         分布式事务：(多个数据库切分数据，同一条数据可能拆分到不同的数据库上存储，面向的对象是数据库)
             两阶段提交协议：(解决的是分布式数据库数据强一致性问题。)
                投票阶段：参与者结点和协调者结点(1vN)
                    1.协调者向所有的参与者发送事务执行请求，并等待参与者反馈事务执行结果。
                    2.事务参与者收到请求之后，执行事务，但不提交，并记录事务日志。
                    3.参与者将自己事务执行情况反馈给协调者，同时阻塞等待协调者的后续指令
                事务提交阶段：(当协调者超时，参与者阻塞)
                    1. 所有的参与者回复能够正常执行事务:
                        协调者通知commit-->all参与者commmit,释放资源-->all参与者反馈commit结果给协调者
                    2. 一个或多个参与者回复事务执行失败 或者 协调者等待超时
                        协调者通知rollback-->all参与者rollback,释放资源-->all参与者反馈rollback结果给协调者
                缺点：
                    单点问题：协调者宕机
                    同步阻塞：参与者阻塞
                    数据不一致性：网络延迟，参与者没有及时提交

             三阶段提交协议：(类似于缓存查询原理，有个预处理过程)
                can_commit:
                    1.协调者向各个参与者发送事务询问通知，询问是否可以执行事务操作，并等待回复
                    2.各个参与者依据自身状况回复一个预估值，如果预估自己能够正常执行事务就返回确定信息，并进入预备状态，否则返回否定信息
                pre_commit:
                    1.所有的参与者都返回确定信息
                        1. 协调者向所有的事务参与者发送事务执行通知
                        2. 参与者收到通知后，执行事务，但不提交
                        3. 参与者将事务执行情况返回给客户端
                    2. 一个或多个参与者返回否定信息 或者 协调者等待超时
                        1. 协调者向所有事务参与者发送abort通知
                        2. 参与者收到通知后，中断事务。退出预备状态
                do_commit:(在2-1的实际执行反馈结果基础上,当协调者超时，参与者在超时后依然提交)
                    1. 所有的参与者都能正常执行事务
                        协调者通知commit-->all参与者commmit,释放资源-->all参与者反馈commit结果给协调者
                    2. 一个或多个参与者执行事务失败 或者 协调者等待超时
                        协调者通知rollback-->all参与者rollback,释放资源-->all参与者反馈rollback结果给协调者
         JDBC的锁类型：
            乐观锁：只有当更新数据的时候才会锁定记录。解决脏读。使用的是写屏障，具体的操作事务是：提交读事务
            悲观锁：从查询到更新和提交整个过程都会对数据记录进行加锁。解决脏读,可重复读，幻读。使用的是读屏障，具体的操作事务是：串行化事务

    SOAP：简单对象访问协议。soap=http+xml。Soap建立在http上，是用http传送xml而已。用于webservice服务
          Envelope: 标记为soap消息
          Header: 头部信息
          Body: 调用和响应信息
          Fault: 错误信息