学习OpenAPI的接口文档规范：
    7.Open API：将自己的网站服务封装成应用编程接口开放给第三方开发者使用。这个比较抽象。
                        官网：https://www.openapis.org。OpenAPI规范是基于Swagger规范的与供应商无关的开源API描述。
                        REST风格的API技术支持。描述清楚服务功能，不和源码绑定
                        OpenAPI能够被文档生成工具使用来展示API，代码生成工具生成服务器和客户端，还有测试工具和其他的用户案例。
                        文件编写语言，有点类似Java的对象之类的。
                历史发展：2015年9月5日创建，基于Linux基金会。SmartBear捐献了Swagger规范。
                         Swagger2.0规范被重新命名作为了OpenAPI规范。
                最新版本：3.0.2。发布时间2018年10月9日。下载的源码都是一些json或者yaml格式的文档
                同源的Swagger：可以通过编写yaml文件或者json文件写处OpenAPI规范的文档。
                    快速标准的API设计器：SwaggerHub。手动使用工具创建
                                       Swagger Editor:支持swagger2.0和OpenAPI3.0。【推荐】
                                                      使用nodejs环境。在线编辑器http://editor.swagger.io
                                                      该工具可以自动生成服务器端和客户端，进行API测试。
                                                      它集成了Swagger UI和Swagger Codgen
                    容易测试的API测试器：SwaggerInspector。使用代码生成API文档.云端测试。不用下载压缩包之类的。
                                      SoapUI Pro：导入规范自动测试
                                      LoadUI Pro
                    API的模拟和可视化：SwaggerHub Mocking
                                     ServiceV Pro
                    API的监视：AlertSite
                    可视化的OpenAPI文档： SWagger UI【推荐】。最新版本3.20.5
                    为API生成服务器存根和客户端SDK来简化构建过程：Swagger Codegen【推荐】。Swagger编译--代码生成工具，整合多种语言。
                3.0参考文档教程:路径在Swagger的官网下。
                    定义：是一个REST风格的API描述格式规范。
                    路径模板：使用花括号{}来标记路径参数。
                    媒体类型：它是请求体或响应体数据的格式。
                               text/plain; charset=utf-8
                               application/json
                               application/vnd.github+json
                               application/vnd.github.v3+json
                               application/vnd.github.v3.raw+json
                               application/vnd.github.v3.text+json
                               application/vnd.github.v3.html+json
                               application/vnd.github.v3.full+json
                               application/vnd.github.v3.diff
                    文件格式：json或者yaml。文件内容是区分大小写的。
                        数据类型：integer/number/string/boolean/array/object
                        文件结构对象：主要有openapi: 元数据。主要取值有3.0.0/3.0.1/3.0.2 语法都是一样的
                                         info: API信息，主要有title/description/version
                                         servers:指定服务器和URL。主要有URL/description
                                         paths: 终端用户的API路径。主要有参数，请求体，响应状态码
                                         Parameters：指定URL的动态路径，查询参数，请求头，cookie，数据格式和参数是否必须
                                                     主要有in/required/description/schema
                                         Request Body：请求体。主要有required/content
                                         Responses：响应。主要有响应码/description/content。注意响应码必须是'200'的格式，有引号。
                                         Input and Output Models：输入和输出模型。主要有properties/required
                                         Authentication：身份验证。主要有BasicAuth
                    API Server and Base URL: 前缀(基础路由) + 节点路径(服务名) + 查询参数(?后面的)
                                             可以在路径层面重写服务器。
                    Operations： 请求的各种操作。get, post, put, patch, delete, head, options, and trace
                    Query String in Paths： parameters:参数定义时。每个参数前面都要添加中划线-。
                                                  - in: query   判断是输入还是输出，还有类别。取值有query/path/header/cookie
                                                    name: role  参数名字
                                                    schema:     元数据分析
                                                      type: string   参数的数据类型
                                                      enum: [user, poweruser, admin]   参数的默认取值
                                                    required: true   参数是否是必须的。
                    Parameter Serialization: 参数序列化。将对象或者数据序列化。主要有style 和 explode
                    潜规则：在接口上各种注解，然后使用controller继承实现
