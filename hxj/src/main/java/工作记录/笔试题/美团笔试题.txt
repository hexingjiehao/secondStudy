1.https的协议请求过程：【OK】
1) 客户端向服务器发起HTTPS请求，连接到服务器的443端口；
2) 服务器端有一个密钥对，即公钥（即数字证书）和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人；
3) 服务器将自己的公钥发送给客户端；
4) 客户端收到服务器端的公钥之后，检查其合法性，如果发现发现公钥有问题，那么HTTPS传输就无法继续，如果公钥合格，则客户端会生成一个客户端密钥，然后用服务器的公钥对客户端密钥进行非对称加密成密文，至此，HTTPS中的第一次HTTP请求结束；

5) 客户端发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器；
6) 服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文；
7) 然后服务器将加密后的密文发送给客户端；
8) 客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。


2.待测试的大众点评主页打不开（不是40x，50x）这样的错误，是无法链接，可能原因有哪些？怎么排查？【OK】
答：
由DNS错误导致的打不开网页，通常是由于DNS服务器自身问题，或者用户设定的dns服务器地址有误。
    解决方案：使用宽带上网的用户，可以使用ipconfig /flushdns命令来重新获取；
            局域网内的用户，如果IE打不开网页，且看到DNS错误的提示，大多是网关设置出现问题，需要网管解决。
主机防火墙拦截。解决方案：关掉防火墙和杀毒软件。
浏览器设置了***服务器。解决方案： 点击浏览器工具==》internet选项==》连接==》局域网设置，把***服务器的勾去掉。
hosts文件被修改导致的IE打不开网页，基本上都是病毒引起的。hosts文件保存在c:\windows\system32\drivers\etc目录下，病毒经常修改这个文件，使得本机不能正常访问一些指定的网站。
    解决方案：下载杀毒软件去修复。


3.RESTful调用和 RPC调用有什么区别？【OK】
如果让你设计一个RPC服务治理框架你会设计那些模块？
是否了解过Service Mesh，如果了解Service Mesh是用来解决什么问题的？
答：
RESTful是一种软件架构风格，用于约束客户端和服务器交互，满足这些约束条件和原则的应用程序或设计就是 RESTful。
比如HTTP协议使用同一个URL地址，通过GET，POST，PUT，DELETE等方式实现查询、提交、删除数据。
RPC是远程过程调用，是用于解决分布式系统服务间调用的一种方式。
RPC采用客户端与服务端模式，双方通过约定的接口（常见为通过IDL定义或者是代码定义）以类似本地方法调用的方式来进行交互，客户端根据约定传输调用函数+参数给服务端（一般是网络传输TCP/UDP），服务端处理完按照约定将返回值返回给客户端。

重点为RESTful HTTP的约束风格，RPC调用模型。
可分为两大部分RPC +服务治理
RPC部分 = IDL  +客户端/服务端实现层  +协议层 +数据传输层
服务治理 =服务管理（注册中心） +服务监控 +服务容灾 +服务鉴权

Service Mesh为了解决传统微服务框架"胖客户端"方式，引入的如下问题：
与业务无关的服务治理逻辑与业务代码强耦合，框架、SDK的升级与业务代码强绑定，多语言的胖客户端支持起来性价比极低。


4.请描述避免多线程竞争时有哪些手段？【OK】
答：
1) 不可变对象；
2) ThreadLocal 对象；
3) 互斥锁；
4) CAS；


5.如果线上某台虚机CPU Load过高，该如何快速排查原因？【OK】
答：
造成cpu load过高的原因： Full gc次数的增大、代码中存在Bug（例如死循环、正则的不恰当使用等）都有可能造成cpu load 增高。
1. jps -v：查看java进程号
2. top -Hp [java进程号]：查看当前进程下最耗费CPU的线程
3. printf "%x\n" [步骤2中的线程号]：得到线程的16进制表示
4. jstack [java进程号] | grep -A100 [步骤3的结果]：查看线程堆栈，定位代码行。


6.请简要描述MySQL数据库联合索引的命中规则。【OK】
答：
1) where条件中的顺序不影响索引命中。
    例如联合索引(col1, col2, col3), where条件为col3=`c` AND col2=b AND col1=`a`, MySQL优化器会自行进行优化，可命中联合索引(col1, col2, col3).
2) MySQL联合索引遵循最左前缀匹配规则，即从联合索引的最左列开始向右匹配，直到遇到匹配终止条件。
    例如联合索引(col1, col2, col3), where条件为col1=`a` AND col2=`b`可命中该联合索引的(col1,col2)前缀部分, where条件为col2=`b` AND col3=`c`不符合最左前缀匹配，不能命中该联合索引。
3) 匹配终止条件为范围操作符(如>, <, between, like等)或函数等不能应用索引的情况。
    例如联合索引(col1, col2, col3), where条件为col1=`a` AND col2>1 AND col3=`c`, 在col2列上为范围查询，匹配即终止，只会匹配到col1，不能匹配到(col1, col2, col3).


7.什么是分布式事务？分布式事务产生的原因是什么？分布式事务的解决方案有哪些？分别有哪些优缺点？【OK】
答：
分布式事物：将一次大的操作分为很多小的操作，这些小的操作位于各自的服务器上，分布式事物需要保证这些小的操作要么全部成功，要么全部失败。
分布式事物产生的原因：1.为了解决不同数据库操作时数据不一致的问题。2.应用SOA话。
分布式事物的解决方案：
1.2PC：两阶段提交
优点：保证数据的强一致性，适合对数据要求高的强一致性领域。
缺点：实现复杂，牺牲了可用性，性能不高，不适合高并发，高性能的场景。
2.3PC:三阶段提交
优点：相对于二阶段，它减低了阻塞的范围，解决了协调者这参与者同时挂掉的问题，即等待超时后，协调者或参与者会中断事务，避免单点问题。
缺点：数据不一致性依然存在。
3.补偿事务（TCC）
优点：1）性能提升，2）数据最终一致， 3）可靠性更高
缺点：花费高


8.什么是事务传播行为？你知道Spring事务中都有哪些传播类型吗？如何使用/指定传播类型？【OK】
答：
1） 事务传播用于描述当一个由事务传播行为修饰的方法被嵌套入另外一个方法时，事务如何传播。常用于定义发生事务嵌套时，如何继续执行。
2） Spring 中共定义了7中事务传播类型，明细如下表， 需答出3~4种常见类型即可：
    a) PROPAGATION_REQUIRED： 当前没有事务时开启新事务，如果有则加入；
    b) PROPAGATION_REQUIRES_NEW： 强制开启新事务，挂起已有事务（如有）；
    c) PROPAGATION_SUPPORTS： 当前有事务时加入， 没有则以非事务方式执行；
    d) PROPAGATION_NOT_SUPPORTED： 以非事务方式执行， 挂起当前事务（如有）；
3） 可以在注解或者XML中指定传播类型， 如 “@Transactional(Propagation=xxx)”


9. IO设计中Reactor 和 Proactor 区别。【OK】
答：
Reactor被动的等待指示事件的到来并作出反应，有一个等待的过程，做什么都要先放入到监听事件集合中等待handler可用时再进行操作，
实现相对简单，对于耗时短的处理场景比较高效，但Reactor处理耗时长的操作会造成事件分发的阻塞，影响到后续事件的处理。

Proactor直接调用异步读写操作，调用完后立刻返回，实现了一个主动的事件分离和分发模型；
这种设计允许多个任务并发的执行，从而提高吞吐量；并可执行耗时长的任务（各个任务间互不影响），
Proactor性能更高，能够处理耗时长的并发场景，但Proactor实现逻辑复杂；依赖操作系统对异步的支持，
目前实现了纯异步操作的操作系统少，实现优秀的如windows IOCP，但由于其windows系统用于服务器的局限性，
目前应用范围较小；而Unix/Linux系统对纯异步的支持有限，应用事件驱动的主流还是通过select/epoll来实现。