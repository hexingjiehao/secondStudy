应用场景：
有时候，我们需要从一个已经存在的对象重新拷贝一份出来，并且不仅这两个内容相等，在内存中存在两个独立的存储地址，互不影响。
这时，就需要用到Java的克隆机制。


两个对象是否相等通常有两层含义：
对象的内容是否相等，通常使用到对象equals(Object o)函数；
引用的地址是否相同，使用运算符==比较即可。


1.通过Cloneable接口可以很轻松地实现Java对象的克隆，只需要implements Cloneable并实现Object的clone()方法即可，
    clone()方法是一个native方法，同时抛出了一个异常。
    native:一个Native Method就是一个java调用非java代码的接口。【这里不过多解释，可以参看文章https://blog.csdn.net/abcyyjjkk/article/details/70240366】


2.当一个对象只有基本数据类型，重写clone方法时，可以得到完全克隆出一个新对象


3.浅克隆与深克隆
    浅克隆:顾名思义，就是很表层的克隆，只克隆对象自身的引用地址；
    深克隆:也称“N层克隆”，克隆对象自身以及对象所包含的引用类型对象的引用地址。
    这里需要注意的是，对于基本数据类型（primitive）和使用常量池方式创建的String类型，都会针对原值克隆，所以不存在引用地址一说。
    当然不包括他们对应的包装类。

4.对于深克隆，如果层层重写clone函数，非常不方便，于是使用心得clone方法--Serializable
    使用ObjectOutputStream和ObjectInputStrean来实现对象的序列化和反序列化
    写一个静态方法的类，参数是对象泛型，使用流进行clone
