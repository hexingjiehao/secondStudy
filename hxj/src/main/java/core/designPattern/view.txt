1.学习java中常用的23中设计模式：(都和接口密切相关--接口的花样用法)
    3大分类：
        创建型模式(5个)：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。
        结构型模式(7个)：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。
        行为型模式(11个)：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。
        并发型模式：
        线程池模式：
    6大原则：
        总的原则：开闭原则:对扩展开发，对修改关闭
        单一职责原则：1个类实现1个功能
        里氏替换原则(继承)：任何基类可以出现的地方，子类一定可以出现。子类对父类的方法尽量不要重写和重载
        依赖倒转原则：面向接口编程，依赖于抽象而不依赖于具体。
        接口隔离原则：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。子类的接口必须全部会用到
        迪米特法则(最少知道原则):一个类对自己依赖的类知道的越少越好。通过public方法调用。
            朋友关系：类之间有耦合关系。包括依赖、关联、聚合、组合。比如类中的全局变量，方法的参数和返回值
        合成复用原则：最好使用合成/聚合的方式，而不是使用继承
    常用模式：
        创建类型：
            0.简单工厂模式
                普通简单工厂：根据类型值，在工厂中new对应的实现了接口的类
                多方法简单工厂:在工厂中调用不同的方法创建不同的对象
                静态方法简单工厂：将多个创建方法设置成静态的。不需要new工厂类
            1.工厂方法模式：增加新功能时，增加一个接口和工厂还有实现类，最终返回的原来的接口对象。
            2.抽象工厂模式：可以创建多个产品线。每个产品线下有多个产品。换工厂时对应的产品批量换
            3.单例模式：jvm只有一个对象,最好是多线程安全的
            4.建造者模式:
            5.原型模式:clone复制对象,深复制和浅复制
        结构类型：
            6.适配器模式：(主要是继承关系)
                类的适配器模式(继承)：继承src类，并实现一个有src类同名方法的接口。将原来的功能扩展到新功能里。
                对象的适配器模式(拥有对象)：不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题
                接口的适配器模式：用抽象类实现接口，然后继承抽象类。子类方法覆盖父类方法。解决接口中多余实现的方法。
            7.装饰模式：用装饰者代替被装饰者，增加功能。实现同样接口，用接口进行各种操作。持有接口对象
            8.代理模式：用代理类实现相同接口，增加一些操作,具体业务还是调用原来的类。持有实现类。
            9.外观模式: 解决类之间的依赖关系，将关系放入专门的类中。类似于大管家理清执行顺序
            10.桥接模式:将抽象化与实现化解耦，使得二者可以独立变化。将接口转化为抽象类
            11.组合模式：处理类似树形结构问题方便。类似于c++中的结构体实现
            12.享元模式：实现对象的共享,即共享池。当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。
        行为类型：
            父类与子类：
                13.策略模式：将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。
                14.模板方法模式：父类引用指向子类对象，调用子类方法
            两个类之间：
                15.观察者模式：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。两个接口
                16.迭代子模式: 顺序访问聚集中的对象。类似于自己写集合类，自己写迭代器。最终的数据结构是数组或者链表
                17.责任链模式：类似于结构体链表。请求在这条链上传递，直到某一对象决定处理该请求
                18.命令模式：Invoker是调用者（司令员），Receiver是被调用者（士兵），MyCommand是命令，实现了Command接口，持有接收对象
                            由命令来设置不同的执行者，执行者对所有的命令都是同样的执行。
            类的状态：
                19.备忘录模式：保存一个对象的某个状态，以便在适当的时候恢复对象。两个类存储同样的备份信息
                20.状态模式：当对象的状态改变时，同时改变其行为
            通过中间类：
                21.访问者模式：是一种分离对象数据结构与行为的方法。动态添加新的操作。交叉将接口作为入参
                22.中介者模式：只需关心和Mediator类的关系，具体类类之间的关系及调度交给Mediator就行，这有点像spring容器的作用。交叉调用
                23.解释器模式：编译器的开发中，所以适用面比较窄
