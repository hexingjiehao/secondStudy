1.学习Mustache页面模版引擎
    0.概述：可以支持多种语言。官网地址http://mustache.github.io
    1.API地址：http://spullara.github.io/mustache/apidocs/
    2.java客户端github地址：https://github.com/spullara/mustache.java
    3.jar包依赖：{使用java8+}
        <dependency>
          <groupId>com.github.spullara.mustache.java</groupId>
          <artifactId>compiler</artifactId>
          <version>0.9.6</version>
        </dependency>
    4.模版文件： 暂时只能使用map和类来填充，json不行
        {{#items}}              //{{# }} 等价于声明类或者方法，有一种循环的效果
        Name: {{name}}
        Price: {{price}}        //{{ }} 这里等价于声明属性
          {{#features}}
          Feature: {{description}}
          {{/features}}
        {{/items}}              //{{/ }} 等价于类的声明结束
    5.举例代码：
        public class Context {
          List<Item> items() {
            return Arrays.asList(
              new Item("Item 1", "$19.99", Arrays.asList(new Feature("New!"), new Feature("Awesome!"))),
              new Item("Item 2", "$29.99", Arrays.asList(new Feature("Old."), new Feature("Ugly.")))
            );
          }

          static class Item {
            Item(String name, String price, List<Feature> features) {
              this.name = name;
              this.price = price;
              this.features = features;
            }
            String name, price;
            List<Feature> features;
          }

          static class Feature {
            Feature(String description) {
               this.description = description;
            }
            String description;
          }
        }
    6.执行结果：
        Name: Item 1
        Price: $19.99
          Feature: New!
          Feature: Awesome!
        Name: Item 2
        Price: $29.99
          Feature: Old.
          Feature: Ugly.
    7.完整的java渲染代码：
        package mustachejava;

        import com.github.mustachejava.DefaultMustacheFactory;
        import com.github.mustachejava.Mustache;
        import com.github.mustachejava.MustacheFactory;

        import java.io.IOException;
        import java.io.PrintWriter;
        import java.io.Writer;
        import java.util.Arrays;
        import java.util.List;

        public class Example {

          List<Item> items() {
            return Arrays.asList(
              new Item("Item 1", "$19.99", Arrays.asList(new Feature("New!"), new Feature("Awesome!"))),
              new Item("Item 2", "$29.99", Arrays.asList(new Feature("Old."), new Feature("Ugly.")))
            );
          }

          static class Item {
            Item(String name, String price, List<Feature> features) {
              this.name = name;
              this.price = price;
              this.features = features;
            }

            String name, price;
            List<Feature> features;
          }

          static class Feature {
            Feature(String description) {
              this.description = description;
            }

            String description;
          }

          public static void main(String[] args) throws IOException {
            MustacheFactory mf = new DefaultMustacheFactory();
            Mustache mustache = mf.compile("template.mustache");
            mustache.execute(new PrintWriter(System.out), new Example()).flush();
          }
        }

        注意⚠️：这里可以用map替换
            public static void main(String[] args) throws IOException {
                HashMap<String, Object> scopes = new HashMap<String, Object>();
                scopes.put("name", "Mustache");
                scopes.put("feature", new Feature("Perfect!"));

                Writer writer = new OutputStreamWriter(System.out);
                MustacheFactory mf = new DefaultMustacheFactory();
                Mustache mustache = mf.compile(new StringReader("{{name}}, {{feature.description}}!"), "example");
                mustache.execute(writer, scopes);
                writer.flush();
            }

