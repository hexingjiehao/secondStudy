1.学习Vertx-Auth-common知识点：
    1.功能：提供身份验证和授权
    2.jar包依赖：<dependency>
                  <groupId>io.vertx</groupId>
                  <artifactId>vertx-auth-common</artifactId>
                  <version>3.7.1</version>
                </dependency>
    3.基本概念：
        Authentication：身份验证。由一个json对象组成。异步操作，包含被验证的User
            简单实现：用户名密码。new JsonObject().put("username", "tim").put("password", "mypassword");
                举例：
                    JsonObject authInfo = new JsonObject().put("username", "tim").put("password", "mypassword");

                    authProvider.authenticate(authInfo, res -> {
                        if (res.succeeded()) {
                            User user = res.result();
                            System.out.println("User " + user.principal() + " is now authenticated");
                        } else {
                            res.cause().printStackTrace();
                        }
                    });
            JWT令牌实现：
            OAuth承载令牌：

        Authorisation：授权。给完成身份验证的用户授权
            举例：
                user.isAuthorized("printers:printer1234", res -> {
                    if (res.succeeded()) {
                        boolean hasAuthority = res.result();
                        if (hasAuthority) {
                            System.out.println("User has the authority");
                        } else {
                            System.out.println("User does not have the authority");
                        }
                    } else {
                        res.cause().printStackTrace();
                    }
                });

            Caching authorities：缓存授权。清除内部缓存clearCache
            The User Principal：授权用户概要

        创建自己的验证授权实现：🌿🌿🌿🌿🌿
            1.实现AuthProvider接口：
            2.继承AbstractUser抽象类：
            3.如果想要集群，user对象实现ClusterSerializable接口【可选】

        伪随机数发生器：异步不阻塞。使用PRNG算法，一般不用专门配置
            共享伪随机数生成器：因为它在资源中很昂贵，所以共享。使用VertxContextPRNG
                String token = VertxContextPRNG.current(vertx).nextString(32);
                // 生成安全随机数
                int randomInt = VertxContextPRNG.current(vertx).nextInt();