1.学习vert.x-web-api-contract语法：
    1.概念：支持OpenAPI 3，提供简单接口构建路由器和挂载安全和验证处理程序
    2.jar包依赖：<dependency>
                  <groupId>io.vertx</groupId>
                  <artifactId>vertx-web-api-contract</artifactId>
                  <version>3.7.0</version>
                </dependency>

    3.http请求验证：【公司的项目有使用，验证URL的格式或取值是否符合要求】
        1.创建对象句柄：
            HTTPRequestValidationHandler validationHandler = HTTPRequestValidationHandler.create()
                                                                    .addQueryParam("parameterName", ParameterType.INT, true)
                                                                    .addFormParamWithPattern("formParameterName", "a{4}", true)
                                                                    .addPathParam("pathParam", ParameterType.FLOAT);
        2.挂载验证句柄：🌿🌿🌿🌿🌿
            router.route().handler(BodyHandler.create());
            router.get("/awesome/:pathParam")
              .handler(validationHandler)
              .handler((routingContext) -> {
                    RequestParameters params = routingContext.get("parsedParameters");

                    Integer parameterName = params.queryParameter("parameterName").getInteger();
                    String formParameterName = params.formParameter("formParameterName").getString();
                    Float pathParam = params.pathParameter("pathParam").getFloat();
              }).failureHandler((routingContext) -> {
                    Throwable failure = routingContext.failure();
                    if (failure instanceof ValidationException) {
                        String validationErrorMessage = failure.getMessage();
                    }
              });

        3.请求参数的类型：【核心ParameterType】
            RequestParameters params = routingContext.get("parsedParameters");
            RequestParameter awesomeParameter = params.queryParameter("awesomeParameter");
            if (awesomeParameter != null) {
                if (!awesomeParameter.isEmpty()) {
                    Integer awesome = awesomeParameter.getInteger();
                } else {
                    ......
                }
            } else {
                ......
            }

        4.管理验证失败：
            router.get("/awesome/:pathParam")
              .handler(validationHandler)
              .handler((routingContext) -> {
                ......
              })
              .failureHandler((routingContext) -> {
                Throwable failure = routingContext.failure();
                if (failure instanceof ValidationException) {
                  String validationErrorMessage = failure.getMessage();
                }
              });

            //处理所有路径的失败情况
            router.errorHandler(400, routingContext -> {
              if (routingContext.failure() instanceof ValidationException) {
                String validationErrorMessage = routingContext.failure().getMessage();
              } else {
                routingContext.response().setStatusCode(400).end();
              }
            });

        5.OpenAPI 3: 核心OpenAPI3RouterFactory。🌿🌿🌿🌿🌿
            1.创建对象：【通过yaml文件或者URL】
                OpenAPI3RouterFactory.create(vertx, "src/main/resources/petstore.yaml", ar -> {
                     if (ar.succeeded()) {
                       OpenAPI3RouterFactory routerFactory = ar.result();
                     } else {
                       Throwable exception = ar.cause();
                     }
                });


                OpenAPI3RouterFactory.create(vertx,"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml",ar -> {
                    if (ar.succeeded()) {
                      OpenAPI3RouterFactory routerFactory = ar.result();
                    } else {
                      Throwable exception = ar.cause();
                    }
                  });


                AuthorizationValue authorizationValue = new AuthorizationValue()
                  .type("header")
                  .keyName("Authorization")
                  .value("Bearer xx.yy.zz");
                List<JsonObject> authorizations = Collections.singletonList(JsonObject.mapFrom(authorizationValue));
                OpenAPI3RouterFactory.create(vertx,"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml",authorizations,
                  ar -> {
                    if (ar.succeeded()) {
                      OpenAPI3RouterFactory routerFactory = ar.result();
                    } else {
                      Throwable exception = ar.cause();
                    }
                  });

            2.挂载句柄：【同一地址可以挂载成功和失败两种操作】
                routerFactory.addHandlerByOperationId("awesomeOperation", routingContext -> {
                  RequestParameters params = routingContext.get("parsedParameters");
                  RequestParameter body = params.body();
                  JsonObject jsonBody = body.getJsonObject();
                  ......
                });
                routerFactory.addFailureHandlerByOperationId("awesomeOperation", routingContext -> {
                  // Handle failure
                });

            3.定义安全句柄：【只可挂载1个】
                routerFactory.addSecurityHandler("security_scheme_name", securityHandler);
                routerFactory.addSecurityHandler("jwt_auth", JWTAuthHandler.create(jwtAuthProvider));

            4.路由工厂句柄挂载顺序：
                Body handler： 响应体
                Custom global handlers：自定义全局
                Global security handlers defined in upper spec level：用户层面上的全局安全
                Operation specific security handlers：操作规范安全
                Generated validation handler：验证
                User handlers or "Not implemented" handler (if enabled)：用户或者默认

            5.生成路由：
                Router router = routerFactory.getRouter();
                HttpServer server = vertx.createHttpServer(new HttpServerOptions().setPort(8080).setHost("localhost"));
                server.requestHandler(router).listen();
















