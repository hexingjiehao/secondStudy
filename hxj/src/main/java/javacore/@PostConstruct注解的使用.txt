1.定义：
    @PostConstruct注解是Java自己的注解。不是Spring提供的。
2.使用步骤：
    @PostConstruct该注解被用来修饰一个非静态的void（）方法
    被@PostConstruct修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器执行一次。
    PostConstruct在构造函数之后执行，init（）方法之前执行。
3.使用场景：
    通常我们会是在Spring框架中使用到@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：
        Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
4.具体代码举例：
    注意：BillDetailQuery是一个接口，有很多类实现了该接口。一个List接口集合，一个静态map集合
         一个@PostConstruct修饰的初始化方法，绑定接口实现类到map中
         最后通过工厂获取对应的实现类

@Component
public class BillQueryManagerFactory {

    @Autowired
    private List<BillDetailQuery> billDetailQueries;

    private static Map<String, BillDetailQuery> managerMap = new HashMap<>();

    @PostConstruct
    public void initManagerMap() {
        this.checkManager(billDetailQueries);
        billDetailQueries.forEach(billDetailQuery -> {
            buildManager(billDetailQuery);
        });
    }

    public static BillDetailQuery getManager(ReservedDocumentCodeReqVo reservedDocumentCodeReqVo) {
        Integer billType = reservedDocumentCodeReqVo.getBillType();
        String billTypeName = DocumentTypeEnum.findStatusByValue(billType).toString();
        return managerMap.get(billTypeName);
    }

    void checkManager(List<BillDetailQuery> billDetailQueries) {
        if (CollectionUtils.isEmpty(billDetailQueries)) {
            throw new HCloudRuntimeException(WareHouseEnum.LIST_MANAGER_ERROR);
        }
    }

    void buildManager(BillDetailQuery billDetailQuery) {
        if (managerMap.containsKey(billDetailQuery.bindType())) {
            throw new HCloudRuntimeException(WareHouseEnum.LIST_MANAGER_BUILD_ERROR);
        }
        managerMap.put(billDetailQuery.bindType(), billDetailQuery);
    }


}