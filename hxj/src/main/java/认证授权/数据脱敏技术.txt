学习数据脱敏技术

1.概念：是对敏感数据进行变形处理。
2.原理：通过脱敏算法将敏感数据进行遮蔽、变形，将敏感级别降低后对外发放，或供访问使用。

3.分类：静态数据脱敏和动态数据脱敏两种。
       3.1 静态脱敏（“搬移并仿真替换”）：静态数据脱敏一般应用于数据外发场景，例如需要将生产数据导出发送给开发人员、测试人员、分析人员等；
            3.1.1.适用场景：将数据抽取出生产环境脱敏后分发至测试、开发、培训、数据分析等场景

            3.1.2.技术手段：直接通过屏蔽、变形、替换、随机、格式保留加密（FPE）和强加密算法（如AES）等多种脱敏算法，针对不同数据类型进行数据掩码扰乱，并可将脱敏后的数据按用户需求，装载至不同环境中。
                           静态脱敏可提供文件至文件，文件至数据库，数据库至数据库，数据库至文件等不同装载方式。导出的数据是以脱敏后的形式存储于外部存贮介质中，实际上已经改变了存储的数据内容。

            3.1.3.部署方式：将脱敏设备部署于生产环境与测试、开发、共享环境之间，通过脱敏服务器实现静态数据抽取、脱敏、装载

       3.2 动态脱敏（“边脱敏，边使用”）：动态脱敏一般应用于直接连接生产数据的场景，例如运维人员在运维的工作中直接连接生产数据库进行运维，客服人员通过应用直接调取生产中的个人信息等。
            3.2.1.适用场景：适用于不脱离生产环境，对敏感数据的查询和调用结果进行实时脱敏等场景

            3.2.2.技术手段：动态脱敏通过准确的解析SQL语句匹配脱敏条件，例如：访问IP、MAC、数据库用户、客户端工具、操作系统用户、主机名、时间、影响行数等，
                           在匹配成功后改写查询SQL或者拦截防护返回脱敏后的数据到应用端，从而实现敏感数据的脱敏。实际上存储于生产库的数据未发生任何变化。

            3.2.3.部署方式：采用代理部署方式：物理旁路，逻辑串联。应用或者运维人员对数据库的访问必须都经过动态脱敏设备才能根据系统的规则对数据访问结果进行脱敏

4.目的：保护隐私数据等信息的安全，例如机构和企业收集的个人身份信息、手机号码、银行卡信息等敏感数据。
5.实现方法：
    5.1.使用脚本进行脱敏：使用映射关系：
        简单的将敏感人的姓名、身份证号等信息替换为另一个人的，或者将一段地址随机变为另一个地址。
    5.2.使用专业的数据脱敏产品进行脱敏：
        使用工具：shardingsphere：
        参考地址：http://c.hydee.cn/pages/viewpage.action?pageId=110756115 需要连接上海VPN
    5.3.具体的操作步骤：
        5.3.1 创建用户名密码表，现在有一个明问password列
        5.3.2 创建springboot项目，增加依赖：
                <dependency>
                     <groupId>org.apache.shardingsphere</groupId>
                     <artifactId>sharding-jdbc-spring-boot-starter</artifactId>
                </dependency>
                查看项目是否引入自动配置的数据源（比如druid-spring-boot-starter），如果有，先删除，因为数据连接池的starter可能会先加载并且其创建一个默认数据源，而sharding启动时也会自动创建数据源，两者冲突，会报错。
                <dependency>
                     <groupId>com.alibaba</groupId>
                     <artifactId>druid-spring-boot-starter</artifactId>
                </dependency>
                <dependency>
                     <groupId>com.alibaba</groupId>
                     <artifactId>druid</artifactId>
                </dependency>
        5.3.3 给表增加一个密文列cipherColumn
        5.3.4 增加配置：非常重要！！！
                spring:
                  shardingsphere:
                    datasource:
                      name: ds #当有多个数据源时，请将属性名改为 names，多个数据源使用"，"分隔
                      ds:
                        url: jdbc:mysql://localhost:3306/my_test?allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false
                        username: root
                        password: admin
                        driver-class-name: com.mysql.cj.jdbc.Driver
                        type: com.alibaba.druid.pool.DruidDataSource
                        druid:
                          initial-size: 5
                          min-idle: 5
                          max-active: 50
                          max-wait: 10000
                          time-between-eviction-runs-millis: 60000
                          min-evictable-idle-time-millis: 300000
                          validation-query: SELECT 1 FROM DUAL
                          web-stat-filter:
                            enabled: false
                            url-pattern: /${api.version}/*
                          stat-view-servlet:
                            enabled: false
                            login-username: mask
                            login-password: hydee_mask
                            url-pattern: /druid/*
                    encrypt:
                      encryptors:
                        encryptor_aes:#加密器
                          type: aes #加解密器类型，可自定义或选择内置类型：MD5/AES
                          props:
                            aes.key.value: hydee_aes_key  #属性配置, 注意：使用AES加密器，需要配置AES加密器的KEY属性：aes.key.value

                      tables:
                        user:
                          columns:
                            password:
                              plainColumn: password #存储明文的字段
                              cipherColumn: pwd_cipher #存储密文的字段
                              encryptor: encryptor_aes #加密器名字

                    props:
                      sql:
                        show: true #打印sql日志
                      query:
                        with:
                          cipher:
                            column: false #是否使用密文列进行查询
        5.3.5 将之前的数据进行手动的数据清洗，也就是人为给cipher数据赋值，因为之前的数据cipherColumn值为null
        5.3.6 重新部署系统后，观察稳定后，删除明文字段。修改配置：比较上下问，删除了列plainColumn
                encrypt:
                  encryptors:
                    encryptor_aes:
                      type: aes  #加解密器类型，可自定义或选择内置类型：MD5/AES
                  props:
                        aes.key.value: hydee_aes_key #属性配置, 注意：使用AES加密器，需要配置AES加密器的KEY属性：aes.key.value
                  tables:
                    user:
                      columns:
                        password:
                  cipherColumn: pwd_cipher #存储密文的字段
                  encryptor: encryptor_aes #加密器名字


6.学习Apache ShardingSphere
6.1.官网：http://shardingsphere.apache.org/index_zh.html
6.2.概念：Apache ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款相互独立，却又能够混合部署配合使用的产品组成。
       它们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。